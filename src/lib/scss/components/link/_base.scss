@use 'sass:math';
$base-borderRadius: $borderRadius;
$base-paddingX: $paddingX;
// $base-paddingX: 0.1px;
$base-paddingY: math.div($paddingY, 2);
$base-paddingY: 0;

@mixin Link-base {
	& {
		font-family: inherit;
		font-size: inherit;
		box-sizing: border-box;
		cursor: pointer;
		position: relative;
		// white-space: nowrap;
		color: hsl(var(--base));
		border-radius: $base-borderRadius;
		display: inline-flex;
		text-decoration: none;
		padding: $base-paddingY $base-paddingX;
		outline-width: 1px;
		outline-style: solid;
		outline-color: transparent;
		transition: clip-path 0.3s, transform 0.3s, outline 0.3s;
		&::before {
			content: '';
			position: absolute;
			width: calc(100% - $base-paddingX * 2);
			height: 1px;
			background-color: hsl(var(--base) / 70%);
			top: 100%;
			right: $base-paddingX;
			border-radius: $base-borderRadius;
			pointer-events: none;
			transform-origin: 50% 100%;
			transition: clip-path 0.3s, transform 0.3s, outline 0.3s;
			clip-path: polygon(
				0% 0%,
				0% 100%,
				0 100%,
				0 0,
				100% 0,
				100% 100%,
				0 100%,
				0 100%,
				100% 100%,
				100% 0%
			);
		}

		& > span {
			display: inline-block;
			transition: transform 0.3s cubic-bezier(0.2, 1, 0.8, 1);
		}

		@include action-focus {
			outline-color: hsl(var(--light) / 20%);
		}

		@include action-hover {
			outline-color: transparent;
			&::before {
				transform: translate3d(0, -2px, 0) scale3d(1, 3, 1);
				clip-path: polygon(
					0% 0%,
					0% 100%,
					50% 100%,
					50% 0,
					50% 0,
					50% 100%,
					50% 100%,
					0 100%,
					100% 100%,
					100% 0%
				);
			}
			& > span {
				transform: translate3d(0, -2px, 0);
			}
		}
		&.active {
			&::before {
				background-color: hsl(var(--base));
				font-weight: 700;
				transform: translate3d(0, -2px, 0) scale3d(1, 3, 1);
				clip-path: polygon(
					0% 0%,
					0% 100%,
					50% 100%,
					50% 0,
					50% 0,
					50% 100%,
					50% 100%,
					0 100%,
					100% 100%,
					100% 0%
				);
			}
			& > span {
				transform: translate3d(0, -2px, 0);
			}
		}
		&.truncate {
			@include truncate(100%);
			& > span {
				@include truncate;
			}
		}
	}
}
